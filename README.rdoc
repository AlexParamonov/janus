= Janus

Janus is an authentication engine for Ruby on Rails 3 and is an alternative
to the Warden + Devise combo, without the Rack middleware. The whole project
is inspired by the Warden and Devise API (in order to somehow compatible)
but is quite different since everything happens within ActionDispatch and not
at the Rack level.

This Rails instead of Rack difference, allows to actually have the main logic
within plain Rails controllers. For instance the database authentication is
called from SessionsController, and it's not just another strategy operating
at the Rack level within Warden (which requires to check that it's being
called from the correct URL). There ain't no factory to add strategy modules
to your models too. You must manually include the necessary ones.

Another difference is that you must actually create the necessary controllers,
models, mailers and views within your project (extending the default ones).
You will eventually need to have those controllers anyway, and having those
from the beginning allows to skip some configuration. The burdensome of
manually creating all those classes should eventually be leveraged by using
some rails generators.

Janus also provides a finer control over setting and unsetting a user than
Warden provides. Janus uses +login+ and +logout+ to actually sign the user
in and out, just like Warden, but actually uses +set_user+ and +unset_user+
to manually set the session, without dispatching the +after_login+ and
+after_logout+ hooks, of course.

Emails are also sent from the controllers, not from the models, because I
believe this is actually the job of controllers, not models.

== Features

The main feature is of course having a framework for authenticating users
painleslly. Yet a very usefull feature is the cross domain authentication
--which allows a user to single sign in and out across top level domains.

How is the cross domain authentication strategy usefull? Let's imagine you
host of blogging website where users may host their blogs on other domains.
Since you don't rely on subdomains, it will be a pain to keep the user
authentified, because you can't rely on '.' domain cookie trick.

This is where RemoteAuthentication comes in, and allows you to painlessly
keep your users connected across the main website and their blogs. This
without actually tracking connections since this strategy takes advantage
of the +set_user+ and +unset_user+ methods, because they're not really
signing in, they just stay authentified across domains.

So, Janus provides the following API:

- full authentication system with strategies and hooks
- scoped authentications with parallel authentication (like `users`, `admin_users`, etc.)
- database authentication with password encryption (bcrypt) and validation
- remote authentication for cross domain single sign in / sign out
- abstract controllers for session management, registration, email confirmation and password reset
- route generation for the above controllers

And for the strategies and hooks:

- DatabaseAuthenticatable
- RemoteAuthenticatable
- Confirmable
- Rememberable
- Trackable (note that login through Janus::Manager#set_user won't track the user).

== TODO

- Simple configuration to use scrypt instead of bcrypt for password encryption.
- Reconfirmable when email changes.
- TokenAuthenticatable.
- Remember me on remote authenticated domains.
- Differenciate mailers per resource, by looking for Users::Mailer class.
- Generators: `janus:install` and `janus <scope>`.
- Integrate OmniAuth, or shall we let the user do it himself?
- Providing an OAuth 2.0 server whould be cool.

== Install

There is no automated way to install Janus yet, because generators are missing.
Also remember that Janus is only compatible with Rails 3+.

First add the gem to your Gemfile:

  $ gem 'janus'

Configure your user models by including all or a selection of the Janus::Models
modules:

  class User < ActiveRecord::Base
    include Janus::Models::Base
    include Janus::Models::DatabaseAuthenticatable
    include Janus::Models::RemoteAuthenticatable
    include Janus::Models::Confirmable
    include Janus::Models::Rememberable
    include Janus::Models::Trackable
  end

  class Admin < ActiveRecord::Base
    include Janus::Models::Base
    include Janus::Models::DatabaseAuthenticatable
  end

Configure your routes:

  Name::Application.routes.map do
    janus :users,  :session => true, :registration => true, :password => true, :confirmation => true
    janus :admins, :session => true
    root :to => "home#index"
  end

Create the required controllers:

  class Users::SessionsController < Janus::SessionsController
    respond_to :html
  end

  class Users::RegistrationsController < Janus::RegistrationsController
    respond_to :html
  end

  class Users::PasswordsController < Janus::PasswordsController
    respond_to :html
  end

  class Users::ConfirmationsController < Janus::ConfirmationsController
    respond_to :html
  end

  class Admins::SessionsController < Janus::SessionsController
    respond_to :html
  end

Copy the views from test/rails_app to your application:

  mkdir name/app/views/users/
  cp -r janus/test/rails_app/app/views/users/sessions name/app/views/users/
  cp -r janus/test/rails_app/app/views/users/registrations name/app/views/users/
  cp -r janus/test/rails_app/app/views/users/confirmations name/app/views/users/
  cp -r janus/test/rails_app/app/views/users/registrations name/app/views/users/
  
  mkdir name/app/views/admins/
  cp -r janus/test/rails_app/app/views/users/sessions name/app/views/users/

Have a look to the test app in <tt>test/rails_app</tt> for additional help:

  app/controllers/application_controller.rb
  app/controller/users/confirmations_controller.rb
  app/controller/users/passwords_controller.rb
  app/controller/users/registrations_controller.rb
  app/controller/users/sessions_controller.rb
  app/mailers/janus_mailer.rb
  app/models/remote_token.rb
  app/models/user.rb
  app/views/janus_mailer/confirmation_instructions.html.erb
  app/views/janus_mailer/confirmation_instructions.text.erb
  app/views/janus_mailer/reset_password_instructions.html.erb
  app/views/janus_mailer/reset_password_instructions.text.erb
  app/views/users/confirmations/new.html.erb
  app/views/users/passwords/new.html.erb
  app/views/users/passwords/edit.html.erb
  app/views/users/registrations/new.html.erb
  app/views/users/registrations/edit.html.erb
  app/views/users/sessions/new.html.erb
  config/initializers/janus.rb
  config/locales/janus.en.yml
  config/routes.rb
  db/migrate/*.rb

== License

Janus is distributed under the MIT-License.

== Authors

Most of the API and some code like password encryption is copied from
Devise: http://github.com/plataformatec/devise.git and Warden:
http://github.com/hassox/warden

- Julien Portalier <ysbaddaden@gmail.com>

